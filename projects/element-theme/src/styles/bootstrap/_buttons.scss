@use '../variables';
@use '../variables/focus';
@use '../variables/semantic-tokens';
@use '../variables/spacers';
@use '../variables/typography';
@use './mixins/transition';
@use './variables' as bootstrap-variables;

@use 'sass:map';

$btn-circle-font-size-default: 32px !default;
$btn-circle-font-size-sm: 24px !default;
$btn-circle-size-default: 40px !default;
$btn-circle-size-sm: 32px !default;
$btn-circle-size-xs: 24px !default;

// there are some non .btn buttons used in element
button {
  color: semantic-tokens.$element-text-primary;
}

@mixin button-circle-size($btn-size, $font-size) {
  inline-size: $btn-size;
  block-size: $btn-size;
  font-size: $font-size;
}

:is(.btn, .btn-close) {
  line-height: bootstrap-variables.$btn-line-height;
  font-weight: typography.$si-font-weight-h5;
  padding-block: calc(bootstrap-variables.$btn-padding-y - var(--btn-border-width, 0px));
  padding-inline: calc(bootstrap-variables.$btn-padding-x - var(--btn-border-width, 0px));
  font-size: bootstrap-variables.$btn-font-size;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  user-select: none;
  vertical-align: middle;
  background-color: var(--btn-bg, transparent);
  color: var(--btn-color, inherit);
  border: var(--btn-border-width, 0) solid var(--btn-border-color, transparent);
  border-radius: bootstrap-variables.$btn-border-radius;
  @include transition.transition(bootstrap-variables.$btn-transition);

  &:is(:disabled, .disabled),
  fieldset:disabled & {
    pointer-events: none;
    opacity: semantic-tokens.$element-action-disabled-opacity;
  }

  // If the case of a link looking like a button <a class="btn btn-primary" href="#" target="_blank">Go Back</a>,
  // the hover effect from the <a> element needs to be reset.
  &:hover {
    text-decoration: none;
  }

  &:not(:is(:disabled, .disabled)):is(:active, .active, :hover, .hover) {
    color: var(--btn-color-hover, inherit);
    background: var(--btn-bg-hover, inherit);
    border-color: var(--btn-border-color-hover);
  }

  .icon {
    margin-block: -#{map.get(spacers.$spacers, 2)};
    margin-inline: -#{map.get(spacers.$spacers, 2)} #{map.get(spacers.$spacers, 2)};
  }
}

.btn:not(:is(.btn-circle, .btn-link, .btn-close)) {
  min-inline-size: variables.$btn-width-normal;
}

.btn-primary {
  --btn-bg: #{semantic-tokens.$element-action-primary};
  --btn-bg-hover: #{semantic-tokens.$element-action-primary-hover};
  --btn-color: #{semantic-tokens.$element-action-primary-text};
  --btn-color-hover: #{semantic-tokens.$element-action-primary-text};
}

.btn-danger {
  --btn-bg: #{semantic-tokens.$element-action-danger};
  --btn-bg-hover: #{semantic-tokens.$element-action-danger-hover};
  --btn-color: #{semantic-tokens.$element-action-danger-text};
  --btn-color-hover: #{semantic-tokens.$element-action-danger-text};
}

.btn-warning {
  --btn-bg: #{semantic-tokens.$element-action-warning};
  --btn-bg-hover: #{semantic-tokens.$element-action-warning-hover};
  --btn-color: #{semantic-tokens.$element-action-warning-text};
  --btn-color-hover: #{semantic-tokens.$element-action-warning-text};
}

.btn-secondary,
.btn-secondary-warning,
.btn-secondary-danger {
  --btn-bg: #{semantic-tokens.$element-action-secondary};
  --btn-bg-hover: #{semantic-tokens.$element-action-secondary-hover};
  --btn-color: #{semantic-tokens.$element-action-secondary-text};
  --btn-color-hover: #{semantic-tokens.$element-action-secondary-text-hover};
  --btn-border-width: 1px;
  --btn-border-color: #{semantic-tokens.$element-action-secondary-border};
  --btn-border-color-hover: #{semantic-tokens.$element-action-secondary-border-hover};
}

.btn-tertiary,
.btn-tertiary-warning,
.btn-tertiary-danger {
  --btn-bg: transparent;
  --btn-bg-hover: #{semantic-tokens.$element-action-secondary-hover};
  --btn-color: #{semantic-tokens.$element-action-secondary-text};
  --btn-color-hover: #{semantic-tokens.$element-action-secondary-text-hover};
}

.btn-secondary-warning,
.btn-tertiary-warning {
  --btn-bg-hover: #{semantic-tokens.$element-action-warning-hover};
  --btn-color: #{semantic-tokens.$element-action-secondary-warning};
  --btn-color-hover: #{semantic-tokens.$element-action-warning-text};
  --btn-border-color: #{semantic-tokens.$element-action-secondary-warning};
  --btn-border-color-hover: #{semantic-tokens.$element-action-warning-hover};
}

.btn-secondary-danger,
.btn-tertiary-danger {
  --btn-bg-hover: #{semantic-tokens.$element-action-danger-hover};
  --btn-color: #{semantic-tokens.$element-action-secondary-danger};
  --btn-color-hover: #{semantic-tokens.$element-action-danger-text};
  --btn-border-color: #{semantic-tokens.$element-action-secondary-danger};
  --btn-border-color-hover: #{semantic-tokens.$element-action-danger-hover};
}

.btn-link {
  --btn-color: #{bootstrap-variables.$btn-link-color};
  --btn-color-hover: #{bootstrap-variables.$btn-link-hover-color};
  font-weight: typography.$si-font-weight-body;
  justify-content: flex-start;
  text-decoration: bootstrap-variables.$link-decoration;
  padding: 0;

  &:hover {
    text-decoration: bootstrap-variables.$link-hover-decoration;
  }

  &:is(:disabled, .disabled) {
    --btn-color: #{bootstrap-variables.$btn-link-disabled-color};
    opacity: 1;
  }
}

// Circle Buttons
// --------------
:is(.btn-circle, .btn-close) {
  padding: 0 !important; // stylelint-disable-line declaration-no-important
  border-radius: 50%;
  flex-shrink: 0;
}

.btn-circle {
  &,
  &.btn-lg {
    @include button-circle-size($btn-circle-size-default, $btn-circle-font-size-default);
  }

  &.btn-sm {
    @include button-circle-size($btn-circle-size-sm, $btn-circle-font-size-sm);
  }

  &.btn-xs {
    @include button-circle-size($btn-circle-size-xs, $btn-circle-font-size-sm);
  }

  .icon {
    margin-block: 0;
    margin-inline: 0;
  }
}

.btn-circle.btn-ghost,
.btn-close {
  --btn-bg: transparent;
  --btn-bg-hover: #{semantic-tokens.$element-action-secondary-hover};
  --btn-color: #{semantic-tokens.$element-ui-2};
  --btn-color-hover: #{semantic-tokens.$element-ui-1};
}

.btn-lg {
  font-size: bootstrap-variables.$btn-font-size-lg;
  line-height: 1.5;
}

.btn-sm {
  font-size: bootstrap-variables.$btn-font-size-sm;
  line-height: 1;
}

// this is for compatibility so that old markup looks ok-ish
.btn-close {
  @include button-circle-size($btn-circle-size-sm, $btn-circle-font-size-sm);

  font-weight: typography.$si-font-weight-normal;

  &::before {
    content: '\002715';
    font-size: 1rem;
    margin-block-start: 2px;
  }

  > * {
    display: none !important; // stylelint-disable-line declaration-no-important
  }
}

// This button should look like an input field. See .form-control.
.btn-input {
  --btn-bg: #{bootstrap-variables.$input-bg};
  --btn-bg-hover: #{bootstrap-variables.$input-bg};
  --btn-color: #{bootstrap-variables.$input-color};
  --btn-color-hover: #{bootstrap-variables.$input-color};
  --btn-border-width: 1px;
  --btn-border-color: #{semantic-tokens.$element-ui-2};
  --btn-border-color-hover: #{semantic-tokens.$element-ui-1};

  @include typography.si-font(
    typography.$si-font-size-body,
    typography.$si-line-height-body,
    typography.$si-font-weight-body
  );
  padding-block: bootstrap-variables.$input-padding-y;
  padding-inline: 7px;

  border-radius: bootstrap-variables.$input-border-radius;
  justify-content: flex-start;

  &:is(:disabled, .disabled) {
    --btn-border-color: #{semantic-tokens.$element-ui-3};
    --btn-color: #{semantic-tokens.$element-text-disabled};
    opacity: unset;
  }

  &:focus {
    --btn-border-color: #{semantic-tokens.$element-ui-1};
  }
}
