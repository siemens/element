@use '../variables';
@use '../variables/semantic-tokens';
@use '../variables/spacers';
@use '../variables/typography';
@use '../variables/zindex';
@use './variables' as bootstrap-variables;

@use 'sass:map';

.dropup,
.dropend,
.dropdown,
.dropstart {
  position: relative;
}

.dropdown-menu {
  position: absolute;
  z-index: zindex.$zindex-dropdown;
  display: none; // none by default, but block on "open" of the menu
  min-inline-size: bootstrap-variables.$dropdown-min-width;
  max-block-size: calc(100vh - #{map.get(spacers.$spacers, 1) * 2});
  overflow-y: auto;
  padding-block: bootstrap-variables.$dropdown-padding-y;
  padding-inline: bootstrap-variables.$dropdown-padding-x;
  font-size: bootstrap-variables.$dropdown-font-size;
  color: bootstrap-variables.$dropdown-color;
  list-style: none;
  background-color: bootstrap-variables.$dropdown-bg;
  background-clip: padding-box;
  border-radius: bootstrap-variables.$dropdown-border-radius;
  box-shadow: bootstrap-variables.$dropdown-box-shadow;
  margin-block: map.get(spacers.$spacers, 1);
  margin-inline: 0;
  text-align: start;

  &.show {
    display: block;
  }
}

.dropdown-menu,
.dropdown-item {
  .icon + .item-title {
    padding-inline-start: map.get(spacers.$spacers, 4);
  }
}

.dropdown-toggle {
  --caret-rotate: 0deg;
  text-align: start;

  .dropdown-caret {
    padding-inline-start: map.get(spacers.$spacers, 2);
    margin-block: -#{map.get(spacers.$spacers, 2)};
    margin-inline: auto -#{map.get(spacers.$spacers, 4)};
    font-size: 1.5rem !important; // stylelint-disable-line declaration-no-important
    transform: rotate(var(--caret-rotate));
    // adjust the origin to account for the negative margin. Otherwise the element would visually not rotate around the center.
    transform-origin: calc(50% + #{map.get(spacers.$spacers, 1)}) 50%;
    transition: transform variables.$si-caret-transition-duration;
  }

  &.show .dropdown-caret {
    transform: rotate(calc(var(--caret-rotate) + 180deg));
  }
}

.dropup .dropdown-toggle {
  --caret-rotate: 180deg;
}

.dropstart .dropdown-toggle {
  --caret-rotate: 90deg;
}

.dropend .dropdown-toggle {
  --caret-rotate: 270deg;
}

.dropdown-item,
.dropdown-item-text {
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
  block-size: 32px;
  inline-size: 100%;
  padding-block: bootstrap-variables.$dropdown-item-padding-y;
  padding-inline: bootstrap-variables.$dropdown-item-padding-x;
  color: bootstrap-variables.$dropdown-link-color;
  text-decoration: none;
}

.dropdown-item {
  font-weight: bootstrap-variables.$font-weight-normal;
  text-align: inherit; // For `<button>`s
  white-space: nowrap; // prevent links from randomly breaking onto new lines
  background-color: transparent; // For `<button>`s
  border: 0; // For `<button>`s
  cursor: pointer;

  .item-title {
    flex: 1;
  }

  &:focus {
    color: bootstrap-variables.$dropdown-link-color;
    background: transparent;
  }

  // duplicating hover styles from bootstrap. To split them from focus styles. Otherwise hover on focus elements will not work.
  &:hover {
    color: semantic-tokens.$element-text-primary;
    background-color: semantic-tokens.$element-base-1-hover;
    text-decoration: none;
  }

  // duplicating hover styles from bootstrap. To split them from focus styles. Otherwise hover on focus elements will not work.
  &:is(:active, .active) {
    color: var(--element-text-primary);
    background-color: var(--element-base-1-selected);
  }

  &:is(.disabled, :disabled) {
    color: bootstrap-variables.$dropdown-link-disabled-color;
    pointer-events: none;
    background-color: transparent;
    cursor: default;
  }

  .menu-end-icon {
    margin-inline-end: -1 * map.get(spacers.$spacers, 3);

    &.element-record-filled {
      font-size: 1rem;
      margin-inline-end: -1 * map.get(spacers.$spacers, 1);
    }
  }
}

.dropdown-item-static,
.dropdown-item-text {
  cursor: default;
}

// FIXME: drop when dropping si-menu-legacy
.dropdown-item-static {
  &:is(.active, :active, :hover, :hover:focus:not(:focus-visible), :focus) {
    background-color: semantic-tokens.$element-base-1;
  }
}

.dropdown-header {
  display: block;
  padding-block: bootstrap-variables.$dropdown-padding-y;
  padding-inline: bootstrap-variables.$dropdown-item-padding-x;
  margin-block-end: 0; // for use with heading elements
  color: bootstrap-variables.$dropdown-header-color;
  white-space: nowrap; // as with > li > a
  font-size: typography.$si-font-size-title-2;
  font-weight: typography.$si-font-weight-title-2;
}

.dropdown-divider {
  block-size: 0;
  margin-block: bootstrap-variables.$dropdown-divider-margin-y;
  margin-inline: map.get(spacers.$spacers, 5);
  overflow: hidden;
  border-block-start: 1px solid bootstrap-variables.$dropdown-divider-bg;
}

.dropdown > .dropdown-menu {
  inset-block: 100% auto;
  inset-inline: 0 auto;
  margin-block: bootstrap-variables.$dropdown-spacer 0;
  margin-inline: 0;
}

.dropup > .dropdown-menu {
  inset-block: auto 100%;
  inset-inline: auto;
  margin-block: 0 bootstrap-variables.$dropdown-spacer;
  margin-inline: 0;
}

.dropend > .dropdown-menu {
  inset-block: 0 auto;
  inset-inline: 100% auto;
  margin-block: 0;
  margin-inline: bootstrap-variables.$dropdown-spacer 0;
}

.dropstart > .dropdown-menu {
  inset-block: 0 auto;
  inset-inline: auto 100%;
  margin-block: 0;
  margin-inline: 0 bootstrap-variables.$dropdown-spacer;
}

.dropdown-menu {
  &.align-center {
    left: 0; // stylelint-disable-line liberty/use-logical-spec
    right: unset; // stylelint-disable-line liberty/use-logical-spec
    transform: translateX(-50%);
  }

  &.align-start {
    inset-inline: 0 auto;
  }

  &.align-end {
    inset-inline: auto 0;
  }
}
